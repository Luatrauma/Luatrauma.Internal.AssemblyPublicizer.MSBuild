<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <Version>0.1.0</Version>
    <Authors>notpeelz</Authors>
    <Description>An MSBuild task for automating publicization of Luatrauma assemblies.</Description>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/Luatrauma/Luatrauma.Internal.AssemblyPublicizer.MSBuild</PackageProjectUrl>
    <RepositoryUrl>https://github.com/Luatrauma/Luatrauma.Internal.AssemblyPublicizer.MSBuild.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <IncludeSymbols>false</IncludeSymbols>
    <DevelopmentDependency>true</DevelopmentDependency>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>10</LangVersion>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <!--
      Normally we would set `$(BuildOutputTargetFolder)` to `tools` but Alias.MsBuild overrides the main
      assemblies and injects them into `@(ReferenceCopyLocalPaths)`.
      We set `$(IncludeBuildOutput)` to `false`, otherwise it would conflict with the files Alias.MsBuild
      inject.
    -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <TargetsForTfmSpecificContentInPackage>CopyTaskToPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <!--
    MSBuild tasks with dependencies are very tricky to get right.
    See https://natemcmaster.com/blog/2017/11/11/msbuild-task-with-dependencies/
    and https://blog.sentry.io/alias-an-approach-to-net-assembly-conflict-resolution/
    Currently we use Alias.MsBuild to rename all of our runtime dependencies
    and avoid collisions. Unfortunately, Alias.MsBuild runs its target
    at the wrong time so we have to call the task ourselves.
  -->
  <PropertyGroup>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
  </PropertyGroup>

  <ItemGroup>
    <None
      Include="build/*"
      PackagePath="build/"
      Pack="true"
      />
  </ItemGroup>

  <PropertyGroup>
    <!-- $(PkgAlias_MsBuild) comes from the GeneratePathProperty attribute -->
    <_AliasTaskPath><![CDATA[$(PkgAlias_MsBuild)/task/Alias.MsBuild.dll]]></_AliasTaskPath>
  </PropertyGroup>

  <UsingTask
    TaskName="Alias.AliasTask"
    AssemblyFile="$(_AliasTaskPath)"
    />

  <Target
    Name="CopyTaskToPackage"
    DependsOnTargets="ResolveReferences"
    >
    <Alias.AliasTask
      IntermediateAssembly="@(IntermediateAssembly)"
      IntermediateDirectory="$(ProjectDir)$(IntermediateOutputPath)"
      ReferencePath="@(ReferencePath)"
      SignAssembly="false"
      Internalize="false"
      AssembliesToSkipRename=""
      Suffix=""
      Prefix="$(MSBuildProjectName)."
      SolutionDir="$(SolutionDir)"
      ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)"
      AssemblyOriginatorKeyFile=""
      >
      <Output
        TaskParameter="CopyLocalPathsToAdd"
        ItemName="_Alias_CopyLocalPathsToAdd"
        />
      <Output
        TaskParameter="CopyLocalPathsToRemove"
        ItemName="_Alias_CopyLocalPathsToRemove"
        />
    </Alias.AliasTask>

    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(_Alias_CopyLocalPathsToRemove)" />
      <ReferenceCopyLocalPaths Include="@(_Alias_CopyLocalPathsToAdd)" />
    </ItemGroup>

    <!-- https://github.com/NuGet/Home/issues/10063#issuecomment-713083004 -->
    <GetNuGetShortFolderName
      TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
      TargetPlatformMoniker="$(TargetPlatformMoniker)"
      >
      <Output
        TaskParameter="NuGetShortFolderName"
        PropertyName="_NuGetShortFolderName"
        />
    </GetNuGetShortFolderName>
    <ItemGroup>
      <TfmSpecificPackageFile
        Include="@(ReferenceCopyLocalPaths)"
        Condition="'%(Extension)' == '.dll'"
        >
        <PackagePath>tools/$(_NuGetShortFolderName)/</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <ItemGroup>
    <PackageReference
      Include="Alias.MsBuild"
      Version="0.4.3"
      PrivateAssets="All"
      ExcludeAssets="All"
      GeneratePathProperty="true"
      />
    <PackageReference
      Include="BepInEx.AssemblyPublicizer"
      Version="0.4.1"
      PrivateAssets="All"
      />
    <PackageReference
      Include="Microsoft.Build.Framework"
      Version="17.6.3"
      PrivateAssets="All"
      />
    <PackageReference
      Include="VersionInfoGenerator"
      Version="2.1.7"
      PrivateAssets="all"
      />
  </ItemGroup>
</Project>
